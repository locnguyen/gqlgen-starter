// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gqlgen-starter/internal/ent/post"
	"gqlgen-starter/internal/ent/predicate"
	"gqlgen-starter/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldCreateTime: {Type: field.TypeTime, Column: post.FieldCreateTime},
			post.FieldUpdateTime: {Type: field.TypeTime, Column: post.FieldUpdateTime},
			post.FieldAuthorID:   {Type: field.TypeInt64, Column: post.FieldAuthorID},
			post.FieldContent:    {Type: field.TypeString, Column: post.FieldContent},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime:     {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldUpdateTime:     {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldEmail:          {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldHashedPassword: {Type: field.TypeBytes, Column: user.FieldHashedPassword},
			user.FieldFirstName:      {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:       {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldPhoneNumber:    {Type: field.TypeString, Column: user.FieldPhoneNumber},
			user.FieldRoles:          {Type: field.TypeJSON, Column: user.FieldRoles},
		},
	}
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.AuthorTable,
			Columns: []string{post.AuthorColumn},
			Bidi:    false,
		},
		"Post",
		"User",
	)
	graph.MustAddE(
		"posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
		},
		"User",
		"Post",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (pq *PostQuery) Filter() *PostFilter {
	return &PostFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{config: m.config, predicateAdder: m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *PostFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(post.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *PostFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(post.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *PostFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(post.FieldUpdateTime))
}

// WhereAuthorID applies the entql int64 predicate on the author_id field.
func (f *PostFilter) WhereAuthorID(p entql.Int64P) {
	f.Where(p.Field(post.FieldAuthorID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *PostFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(post.FieldContent))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *PostFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *PostFilter) WhereHasAuthorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereHashedPassword applies the entql []byte predicate on the hashed_password field.
func (f *UserFilter) WhereHashedPassword(p entql.BytesP) {
	f.Where(p.Field(user.FieldHashedPassword))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(user.FieldPhoneNumber))
}

// WhereRoles applies the entql json.RawMessage predicate on the roles field.
func (f *UserFilter) WhereRoles(p entql.BytesP) {
	f.Where(p.Field(user.FieldRoles))
}

// WhereHasPosts applies a predicate to check if query has an edge posts.
func (f *UserFilter) WhereHasPosts() {
	f.Where(entql.HasEdge("posts"))
}

// WhereHasPostsWith applies a predicate to check if query has an edge posts with a given conditions (other predicates).
func (f *UserFilter) WhereHasPostsWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
