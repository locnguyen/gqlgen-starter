// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gqlgen-starter/internal/ent/post"
	"gqlgen-starter/internal/ent/schema"
	"gqlgen-starter/internal/ent/session"
	"gqlgen-starter/internal/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	postMixin := schema.Post{}.Mixin()
	postMixinFields0 := postMixin[0].Fields()
	_ = postMixinFields0
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescCreateTime is the schema descriptor for create_time field.
	postDescCreateTime := postMixinFields0[0].Descriptor()
	// post.DefaultCreateTime holds the default value on creation for the create_time field.
	post.DefaultCreateTime = postDescCreateTime.Default.(func() time.Time)
	// postDescUpdateTime is the schema descriptor for update_time field.
	postDescUpdateTime := postMixinFields0[1].Descriptor()
	// post.DefaultUpdateTime holds the default value on creation for the update_time field.
	post.DefaultUpdateTime = postDescUpdateTime.Default.(func() time.Time)
	// post.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	post.UpdateDefaultUpdateTime = postDescUpdateTime.UpdateDefault.(func() time.Time)
	sessionMixin := schema.Session{}.Mixin()
	sessionMixinFields0 := sessionMixin[0].Fields()
	_ = sessionMixinFields0
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescCreateTime is the schema descriptor for create_time field.
	sessionDescCreateTime := sessionMixinFields0[0].Descriptor()
	// session.DefaultCreateTime holds the default value on creation for the create_time field.
	session.DefaultCreateTime = sessionDescCreateTime.Default.(func() time.Time)
	// sessionDescUpdateTime is the schema descriptor for update_time field.
	sessionDescUpdateTime := sessionMixinFields0[1].Descriptor()
	// session.DefaultUpdateTime holds the default value on creation for the update_time field.
	session.DefaultUpdateTime = sessionDescUpdateTime.Default.(func() time.Time)
	// session.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	session.UpdateDefaultUpdateTime = sessionDescUpdateTime.UpdateDefault.(func() time.Time)
	// sessionDescSid is the schema descriptor for sid field.
	sessionDescSid := sessionFields[1].Descriptor()
	// session.SidValidator is a validator for the "sid" field. It is called by the builders before save.
	session.SidValidator = sessionDescSid.Validators[0].(func(string) error)
	// sessionDescDeleted is the schema descriptor for deleted field.
	sessionDescDeleted := sessionFields[3].Descriptor()
	// session.DefaultDeleted holds the default value on creation for the deleted field.
	session.DefaultDeleted = sessionDescDeleted.Default.(bool)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
}
