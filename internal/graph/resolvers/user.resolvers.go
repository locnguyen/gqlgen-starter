package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"gqlgen-starter/internal/app/models"
	"gqlgen-starter/internal/ent"
	"gqlgen-starter/internal/gql/generated"
	"gqlgen-starter/internal/gql/model"
	"gqlgen-starter/internal/oops"
	"gqlgen-starter/internal/utils"
	"net/http"
	"strconv"
	"strings"

	"golang.org/x/crypto/bcrypt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.Session, error) {
	if input.Password != input.PasswordConfirmation {
		return nil, &oops.CodedError{
			HumanMessage: "Password confirmation does not match password",
			Context:      "password confirmation mismatched while creating user",
			HttpStatus:   http.StatusBadRequest,
			Err:          nil,
		}
	}

	hashedPw, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, &oops.CodedError{
			HumanMessage: "Error creating user",
			Context:      "hashing user supplied password to create user",
			HttpStatus:   http.StatusInternalServerError,
			Err:          err,
		}
	}

	entC := ent.FromContext(ctx)
	u, err := entC.User.Create().
		SetEmail(strings.ToLower(input.Email)).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetPhoneNumber(input.PhoneNumber).
		SetHashedPassword(hashedPw).
		SetRoles([]models.Role{models.RoleGenPop}).
		Save(ctx)

	if err != nil {
		return nil, &oops.CodedError{
			HumanMessage: "Error creating user",
			Context:      "inserting new user record",
			HttpStatus:   http.StatusInternalServerError,
			Err:          err,
		}
	}

	if err := r.AppContext.SessionManager.RenewToken(ctx); err != nil {
		return nil, &oops.CodedError{
			HumanMessage: "Error creating user",
			Context:      "creating a session for newly created user",
			HttpStatus:   http.StatusInternalServerError,
			Err:          err,
		}
	}
	r.AppContext.SessionManager.Put(ctx, ent.ContextViewerKey.Name, u)

	return &models.Session{
		Token:  r.AppContext.SessionManager.Token(ctx),
		Expiry: r.AppContext.SessionManager.Deadline(ctx),
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	id64, err := utils.ID64(id)
	if err != nil {
		return nil, err
	}

	entC := ent.FromContext(ctx)
	u, err := entC.User.Get(ctx, id64)

	if err != nil {
		if ent.IsNotFound(err) {
			return nil, &oops.CodedError{
				HumanMessage: "User not found",
				Context:      fmt.Sprintf("user %s not found", id),
				HttpStatus:   http.StatusNotFound,
				Err:          err,
			}
		}
		return nil, &oops.CodedError{
			HumanMessage: "Error loading user",
			Context:      fmt.Sprintf("querying for user %s", id),
			HttpStatus:   http.StatusInternalServerError,
			Err:          err,
		}
	}

	return u, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	id := strconv.FormatInt(obj.ID, 10)
	return id, nil
}

// User returns generated1.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
